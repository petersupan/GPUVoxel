#version 430

#define HEIGHT_MUL 400.0
#define NR_STEPS 1024.0

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
//uniform sampler2D heightSampler;
layout (binding=0, rgba32f) uniform image2D outImage;

uniform vec3 cameraPosition;

void main(){
	vec2 fragCoord = floor(gl_FragCoord.xy);
	ivec2 readPos = ivec2(fragCoord.x + 32*fragCoord.y, 0);
	vec2 uv = readPos;
	uv = uv / textureSize(myTextureSampler, 0);
	
	vec2 refTc = vec2(0.5, 0.0);
	// height at camera Position
	float refHeight = (texture(myTextureSampler, refTc).a + 0.1) * HEIGHT_MUL;
	int lastHeight = 0;
	vec4 lastColor = texture(myTextureSampler, refTc);
	lastColor.a = 1.0;
	
	const int NRSTEPS = 1024;
	const float NRSTEPSF = 1024.0;
	
	ivec2 loc;
	
	for(int j = 0; j < NRSTEPS*2; j++) {
		float heightDivisor = float(j)/NRSTEPSF;
		vec2 tc = uv;
		tc.y = (float(j)/2.0)/NRSTEPSF;
		vec4 height = textureLod(myTextureSampler, tc, 0);
		float h = height.a * HEIGHT_MUL + j/2;
		h /= heightDivisor;
		h -= refHeight/heightDivisor;
		float heightDiff = 1.0/(h-lastHeight);
		float factor = 0.0f;
		//for(int idx = lastHeight; idx < lastHeight + 1/*h*/; idx++)
		for(int i = 0; i < 256; i++)
		{
			int idx = lastHeight + i;
			if (idx > int(h)) break;
			loc.x = int(uv.x*NRSTEPS);
			loc.y = idx;
			vec3 col = vec3(factor)* height.rgb + vec3(1.0-factor) * lastColor.rgb;//mix(height.rgb, lastHeight.rgb, vec3(factor));
			imageStore(outImage, loc, vec4(col, 1));
			factor += heightDiff;
		}
	
		if (h > lastHeight)
		{
			lastHeight = int(h);
		}
		lastColor = vec4 (height.rgb, 1);
	}
	
	// for(int i = 0; i < 1024; i++) {
		
		
		
		// float heightDivisor = float(i)/ 1024.0;
		// height = height*HEIGHT_MUL + i/2;
		// height /= heightDivisor;
		// height -= refHeight/heightDivisor;
		
		// float factor = 0.0;
		// float heightDiff = 1.0/(height - lastHeight);
		
		// int maxHeight = int(readHeight * 32.0);
		// maxHeight -= int(lastHeight - readPos.y);
		// //for(int idx = lastHeight; idx < 256; idx++)
		// // for(int j = 0; j < 512; j++ )
		// // {	
			// // if (j > heightDiff) {
				// // break;
			// // }
			// // int idx = int(lastHeight) + j;
			// // ivec2 outPos = readPos;
			// // outPos.y = idx;
			// // imageStore(outImage, outPos, vec4(color));
			// // factor += heightDiff;
		// // }
		// // for(int j = 0; j < 32; j++)
		// // {
			// // if(j > maxHeight)
				// // break;
			// // int idx = lastHeight + j;
			// // ivec2 outPos = readPos;
			// // outPos.y = idx;
			// // imageStore(outImage, outPos, vec4(color));
			// // lastHeight = idx;
		// // }
		// // if (height > lastHeight) {
			// // lastHeight = height;
		// // }
		// lastColor = color;
		// //imageStore(outImage, readPos, vec4(readHeight));
		
	// }
	//int x = 
	color.rgba = vec4(1.0, 1.0, 0.0, 1.0);

}
