#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;

out vec2 UV;
out vec3 lighting;

void main(){
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
    
    vec3 vertexPos_worldSpace = (M * vec4(vertexPosition_modelspace,1)).xyz;
    vec3 lightVec = LightPosition_worldspace - vertexPos_worldSpace;
    float distanceToLight = length(lightVec);
    vec3 vertexNormal_worldSpace = normalize(( M * vec4(vertexNormal_modelspace,0)).xyz);
    
    lighting = vec3(dot(vertexNormal_worldSpace, normalize(lightVec)));
    float LightPower = 50.0f;
    LightPower /= distanceToLight*distanceToLight;
    lighting *= vec3(LightPower);
    UV = vertexUV;
}



