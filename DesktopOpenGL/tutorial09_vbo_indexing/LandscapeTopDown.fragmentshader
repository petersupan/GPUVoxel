#version 430

#define HEIGHT_MUL 1000.0
#define NR_STEPS 1024.0

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
//uniform sampler2D heightSampler;
layout (binding=0, rgba32f) uniform image2D outImage;

uniform vec3 cameraPosition;

void main(){
	vec2 fragCoord = floor(gl_FragCoord.xy);
	ivec2 readPos = ivec2(fragCoord.x + 32*fragCoord.y, 0);
	vec2 uv = readPos;
	uv = uv / textureSize(myTextureSampler, 0);
	
	vec2 refTc = vec2(0.5, 0.01);
	// height at camera Position
	float refHeight = (texture(myTextureSampler, refTc).a) * HEIGHT_MUL;
	int lastHeight = 0;
	vec4 lastColor = texture(myTextureSampler, refTc);
	lastColor.a = 1.0;
	
	const int NRSTEPS = 1024;
	const float NRSTEPSF = 1024.0;
	
	ivec2 loc;
	vec2 texSize = textureSize(myTextureSampler, 0);
	loc.x = int(uv.x * texSize.x);
	
	vec2 tc = uv;
	
	//// ############## flat drawing #################
	// for(int j = 0; j < NRSTEPS; j++) {
		// float heightDivisor = float(j)/NRSTEPSF;
		// tc.y = (float(j+1))/NRSTEPSF;
		// loc.y = j;
		// vec4 height = textureLod(myTextureSampler, tc, 0);
		// //imageStore(outImage, loc, vec4(height.rgb, 1));
		// float h = (height.a * HEIGHT_MUL) + j;
		// //h/=heightDivisor;
		// for(int i = 0; i < 128; i++)
		// {
			// int idx = lastHeight + i;
			// if(idx > int(h)) break;
			// loc.y = idx;
			// vec3 col = height.rgb;//vec3(i*10);
			// imageStore(outImage, loc, vec4(col, 1));
		// }
		// if (h > lastHeight)
		 // {
			 // lastHeight = int(h);
		 // }
	// }
	
	
	
	float r = textureLod(myTextureSampler, refTc, 4).a;
	
	// ################## original drawing ##############
	for(int j = 0; j < NRSTEPS; j++) {
		
		
		float heightDivisor = float(j)/NRSTEPSF;
		vec3 refVec = normalize(vec3(1, heightDivisor, 0));
		float heightMul = dot(vec3(0,1,0), refVec)*(1.0-r);
		float heightAdd = cos(heightDivisor*(1.0-r)*(3.14/2));
		heightDivisor += 0.5;
		tc.y = (float(j+1))/NRSTEPSF;
		vec4 height = textureLod(myTextureSampler, tc, 0);
		float h = (height.a) * HEIGHT_MUL*heightMul ;// + j/2;* heightMul
		h /= heightDivisor;
		//h -= refHeight/heightDivisor;
		float heightDiff = 1.0/(h-lastHeight);
		float factor = 0.0f;
		//h+= (heightMul+0.001) * NRSTEPSF;
		h+= (heightAdd * j);
		//for(int idx = lastHeight; idx < lastHeight + 1/*h*/; idx++)
		for(int i = 0; i < 512; i++)
		{
			int idx = lastHeight + i;
			if (idx > int(h)) break;
			//loc.x = int(uv.x*NRSTEPS);
			loc.y = idx;
			vec3 col = vec3(factor)* height.rgb + vec3(1.0-factor) * lastColor.rgb;//mix(height.rgb, lastHeight.rgb, vec3(factor));//height.aaa;//vec3(r);//
			imageStore(outImage, loc, vec4(col, 1));
			factor += heightDiff;
		}
	
		if (h > lastHeight)
		{
			lastHeight = int(h);
		}
		lastColor = vec4 (height.rgb, 1);
	}
	
	// for(int i = 0; i < 1024; i++) {
		
		
		
		// float heightDivisor = float(i)/ 1024.0;
		// height = height*HEIGHT_MUL + i/2;
		// height /= heightDivisor;
		// height -= refHeight/heightDivisor;
		
		// float factor = 0.0;
		// float heightDiff = 1.0/(height - lastHeight);
		
		// int maxHeight = int(readHeight * 32.0);
		// maxHeight -= int(lastHeight - readPos.y);
		// //for(int idx = lastHeight; idx < 256; idx++)
		// // for(int j = 0; j < 512; j++ )
		// // {	
			// // if (j > heightDiff) {
				// // break;
			// // }
			// // int idx = int(lastHeight) + j;
			// // ivec2 outPos = readPos;
			// // outPos.y = idx;
			// // imageStore(outImage, outPos, vec4(color));
			// // factor += heightDiff;
		// // }
		// // for(int j = 0; j < 32; j++)
		// // {
			// // if(j > maxHeight)
				// // break;
			// // int idx = lastHeight + j;
			// // ivec2 outPos = readPos;
			// // outPos.y = idx;
			// // imageStore(outImage, outPos, vec4(color));
			// // lastHeight = idx;
		// // }
		// // if (height > lastHeight) {
			// // lastHeight = height;
		// // }
		// lastColor = color;
		// //imageStore(outImage, readPos, vec4(readHeight));
		
	// }
	//int x = 
	color.rgba = vec4(1.0, 1.0, 0.0, 1.0);

}
